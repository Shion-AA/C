#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
// #include "stackADTArray.h"
#include "stackADTLinkedList.h"

void insertBottom(Stack *A, int x){
    if(!isFull(*A)){
        Stack temp;
        initialize(&temp);
        while(!isEmpty(*A)){
            push(&temp, peek(*A));
            pop(A);
        }
        push(A, x);
        while(!isEmpty(temp)){
            push(A, peek(temp));
            pop(&temp);
        }
    }
}

void displayList(Stack A){
        Stack temp;
        int x;
        initialize(&temp);
        while(!isEmpty(A)){
            x = peek(A);
            printf("|\t%d\t|\n", x);
            push(&temp, x);
            pop(&A);
        }
        printf("-----------------\n");
        while(!isEmpty(temp)){
            push(&A, peek(temp));
            pop(&temp);
        }
}

void main(){
    Stack s;
    initialize(&s);
    int populate[] = {10,5,4,3,2,1,0,9,8,7};
    int x, size = sizeof(populate) / sizeof(int);
    for(x = 0; x < size; x++){
        push(&s, populate[x]);
    }

    insertBottom(&s, 99);
    displayList(s);
    pop(&s);
    displayList(s);
    insertBottom(&s, 98);
    displayList(s);
}







-------------------------------------------------------------------------






#ifndef STACKARRAY_H
#define STACKARRAY_H

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 10
typedef struct {
    int elem[MAX];
    int top;
} Stack;

void initialize (Stack *A){
    A->top = -1;
}

bool isFull(Stack A){
    return (A.top == MAX -1) ? true : false;
}
bool isEmpty(Stack A){
    return (A.top == -1) ? true : false;
}

void push(Stack *A, int x){
    if(!isFull(*A)){
        A->elem[++A->top] = x;
    }
}

void pop(Stack *A){
    if(!isEmpty(*A)){
        A->top--;
    }
}

int peek(Stack A){
    return (!isEmpty(A)) ? A.elem[A.top] : -1;
}

// void insertBottom(Stack *A, int x){
//     if(!isFull(*A)){
//         int i;
//         for(i = A->top; i > 0; i--){
//             A->elem[i] = A->elem[i-1];
//         }
//         A->elem[0] = x;
//     }
// }

// void printList(Stack A){
//     printf("top -> ");
//     while(A.top > -1){
//         printf("%d, ", A.elem[A.top]);
//         A.top--;
//     }
//     printf("<- bottom\n");
// }

#endif



-------------------------------------------------------------------------




#ifndef StackADTLinkedList_H
#define StackADTLinkedList_H

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 10
typedef struct node {
    int elem;
    struct node * next;
} *Stack;

void initialize(Stack * L){
    *L = NULL;
}

void push(Stack * L, int value){
    Stack temp = (Stack) malloc (sizeof(struct node));
    temp->elem = value;
    temp->next = *L;
    *L = temp;
}
void pop(Stack * L){
    if (*L != NULL){
        Stack temp = *L;
        *L = (*L)->next;
        free(temp);
    }
}
int peek(Stack L){
    return (L != NULL) ? L->elem : -1;
}
bool isEmpty(Stack L){
    return (L == NULL) ? true : false;
}
bool isFull(Stack L){
    return false;
}

#endif